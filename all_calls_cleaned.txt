Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    std :: cell :: RefCell :: new;
    std :: vec :: Vec :: len;
    core :: panicking :: panic;
    std :: vec :: Vec :: len;
    std :: vec :: Vec < u8 > :: index_mut;
    std :: vec :: Vec < u8 > :: index_mut;
    std :: vec :: Vec :: len;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: fresh) {
    core :: bit_array :: BitArray :: new;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: from_file) {
    std :: result :: Result :: map;
    std :: fs :: read;
    std :: path :: Path :: new;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: from_file :: {closure # 0}) {
    core :: bit_array :: BitArray :: new;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: to_file) {
    std :: fs :: write;
    std :: vec :: Vec < u8 > :: as_ref;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clone) {
    std :: rc :: Rc < std :: cell :: RefCell > :: clone;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: peek) {
    std :: vec :: Vec < u8 > :: index;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
    std :: vec :: Vec < u8 > :: index;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
    std :: vec :: Vec < u8 > :: index;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
    core :: panicking :: panic;
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clean_offset) {
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clean_end_offset) {
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: len) {
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: eat) {
    std :: rc :: Rc < std :: cell :: RefCell > :: clone;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: advance) {
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: matching_data) {
    std :: rc :: Rc < std :: cell :: RefCell > :: eq;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: advance_to_match) {
    core :: bit_array :: BitArray :: advance;
    core :: panicking :: panic;
    core :: bit_array :: BitArray :: pos;
    core :: bit_array :: BitArray :: pos;
    core :: panicking :: panic;
    core :: bit_array :: BitArray :: matching_data;
    std :: rc :: Rc < std :: cell :: RefCell > :: clone;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: pos) {
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: extend) {
    std :: vec :: Vec :: push;
    std :: cell :: RefMut < ' _, std :: vec :: Vec > :: deref_mut;
    core :: bit_array :: BitArray :: peek;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: peek;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    std :: vec :: Vec < u8 > :: index_mut;
    std :: cell :: RefMut < ' _, std :: vec :: Vec > :: deref_mut;
    std :: vec :: Vec :: len;
    std :: cell :: RefMut < ' _, std :: vec :: Vec > :: deref;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: clean_end_offset;
    std :: cell :: RefCell :: borrow_mut;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: clone;
    std :: rc :: Rc :: new;
    std :: cell :: RefCell :: new;
    std :: vec :: Vec < u8 > :: clone;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
    std :: vec :: Vec :: len;
    std :: cell :: Ref < ' _, std :: vec :: Vec > :: deref;
    std :: cell :: RefCell :: borrow;
    std :: rc :: Rc < std :: cell :: RefCell > :: deref;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: add_assign) {
    core :: bit_array :: BitArray :: extend;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: eq) {
    core :: bit_array :: BitArray :: peek;
    core :: bit_array :: BitArray :: peek;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: clone;
    core :: bit_array :: BitArray :: clone;
    core :: bit_array :: BitArray :: len;
    core :: bit_array :: BitArray :: len;
}
Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: fmt) {
    std :: io :: _print;
    std :: fmt :: Arguments :: new_v1_formatted;
    core :: fmt :: UnsafeArg :: new;
    std :: fmt :: rt :: v1 :: Argument :: new;
    std :: fmt :: rt :: v1 :: Count :: Is;
    core :: fmt :: ArgumentV1 :: new_debug;
}
Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: new) {
    std :: collections :: HashMap :: insert;
    std :: string :: String :: to_string;
    std :: slice :: Iter < ' _, std :: string :: String > :: next;
    & std :: vec :: Vec < std :: string :: String > :: into_iter;
    std :: collections :: HashMap :: new;
}
Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: tally) {
    std :: f64 :: powi;
    std :: option :: Option :: unwrap;
    std :: collections :: HashMap :: get_mut;
}
Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: values) {
    std :: vec :: Vec :: push;
    std :: option :: Option :: unwrap;
    std :: collections :: HashMap :: get;
    std :: string :: String :: to_string;
    std :: slice :: Iter < ' _, std :: string :: String > :: next;
    std :: slice :: Iter < ' _, std :: string :: String > :: into_iter;
    core :: slice :: iter;
    std :: vec :: Vec < std :: string :: String > :: deref;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: dist) {
    std :: f64 :: powi;
    & f64 :: sub;
    std :: iter :: Zip < std :: slice :: Iter, std :: slice :: Iter > :: next;
    std :: iter :: Zip < std :: slice :: Iter, std :: slice :: Iter > :: into_iter;
    std :: slice :: Iter < ' _, f64 > :: zip;
    core :: slice :: iter;
    std :: vec :: Vec < f64 > :: deref;
    core :: feature_vector :: FeatureVector :: values;
    core :: slice :: iter;
    std :: vec :: Vec < f64 > :: deref;
    core :: feature_vector :: FeatureVector :: values;
    core :: panicking :: panic;
    std :: vec :: Vec < & std :: string :: String > :: eq;
    std :: slice :: Iter < ' _, std :: string :: String > :: collect;
    core :: feature_vector :: FeatureVector :: features;
    std :: slice :: Iter < ' _, std :: string :: String > :: collect;
    core :: feature_vector :: FeatureVector :: features;
}
Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: features) {
    core :: slice :: iter;
    std :: vec :: Vec < std :: string :: String > :: deref;
}
Decl (andrew_fuzz :: core :: context :: {impl # 0} :: new) {
}
Decl (andrew_fuzz :: core :: context :: {impl # 0} :: parent) {
    std :: rc :: Rc < core :: context :: Context > :: clone;
    std :: option :: Option :: unwrap;
    std :: rc :: Weak :: upgrade;
}
Decl (andrew_fuzz :: core :: context :: {impl # 0} :: child) {
    core :: panicking :: panic;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
}
Decl (andrew_fuzz :: core :: context :: {impl # 0} :: vec) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: context :: {impl # 0} :: map) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: empty) {
    std :: vec :: Vec :: new;
    std :: rc :: Rc < std :: collections :: HashMap > :: clone;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: clone) {
    std :: vec :: Vec < std :: rc :: Rc > :: clone;
    std :: rc :: Rc < std :: collections :: HashMap > :: clone;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: vals) {
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: push) {
    std :: vec :: Vec :: push;
    core :: panicking :: panic;
    std :: collections :: HashMap :: len;
    std :: rc :: Rc < std :: collections :: HashMap > :: deref;
    std :: vec :: Vec :: len;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: get) {
    std :: option :: Option :: map;
    core :: slice :: get;
    std :: vec :: Vec < std :: rc :: Rc > :: deref;
    std :: collections :: HashMap :: get;
    std :: rc :: Rc < std :: collections :: HashMap > :: deref;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: get :: {closure # 0}) {
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: {constant # 0}) {
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: from) {
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: push;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    core :: panicking :: panic;
    std :: option :: Option < usize > :: eq;
    std :: collections :: HashMap :: insert;
    std :: iter :: Enumerate < std :: slice :: Iter > :: next;
    std :: iter :: Enumerate < std :: slice :: Iter > :: into_iter;
    std :: slice :: Iter < ' _, (& str, std :: rc :: Rc < dyn core :: DataModel >) > :: enumerate;
    core :: slice :: iter;
    std :: vec :: Vec :: new;
    std :: collections :: HashMap :: new;
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: from :: {constant # 0}) {
}
Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: index) {
    std :: vec :: Vec < std :: rc :: Rc > :: index;
    std :: collections :: HashMap < & str, usize > :: index;
    std :: rc :: Rc < std :: collections :: HashMap > :: deref;
}
Decl (andrew_fuzz :: core :: {impl # 0} :: new) {
}
Decl (andrew_fuzz :: core :: {impl # 0} :: name) {
}
Decl (andrew_fuzz :: core :: Contextual :: child) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Contextual :: vec) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Contextual :: map) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Contextual :: data) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Contextual :: int) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Contextual :: str) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: core :: Ast :: debug) {
    std :: result :: Result :: expect;
    std :: string :: String :: write_fmt;
    std :: fmt :: Arguments :: new_v1;
    core :: fmt :: ArgumentV1 :: new_display;
    Self :: name;
    std :: string :: String :: new;
}
Decl (andrew_fuzz :: core :: Vectorizer :: do_features) {
    std :: collections :: HashSet :: insert;
    std :: string :: String :: to_string;
    Self :: name;
}
Decl (andrew_fuzz :: core :: Vectorizer :: features) {
    core :: feature_vector :: FeatureVector :: new;
    std :: collections :: hash_set :: IntoIter < std :: string :: String > :: collect;
    std :: collections :: HashSet < std :: string :: String > :: into_iter;
    Self :: do_features;
    std :: collections :: HashSet :: new;
}
Decl (andrew_fuzz :: core :: Vectorizer :: do_vectorization) {
    core :: feature_vector :: FeatureVector :: tally;
    str :: to_string;
}
Decl (andrew_fuzz :: core :: Vectorizer :: vectorize) {
    Self :: do_vectorization;
    Self :: features;
}
Decl (andrew_fuzz :: core :: Serializer :: serialize) {
    Self :: do_serialization;
    core :: bit_array :: BitArray :: fresh;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: map) {
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    core :: bolts :: ChildMap :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: breed) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    core :: bolts :: ChildMap :: push;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    dyn core :: DataModel :: parse;
    std :: rc :: Rc :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: context :: Context :: new;
    std :: rc :: Rc :: downgrade;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: next;
    & std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    core :: bolts :: ChildMap :: vals;
    core :: bolts :: ChildMap :: empty;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: debug) {
    str :: to_string;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: fuzz) {
    std :: vec :: Vec :: push;
    std :: rc :: Rc :: new;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    core :: bolts :: ChildMap :: push;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    core :: bolts :: ChildMap :: clone;
    std :: vec :: IntoIter < std :: rc :: Rc > :: next;
    std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    dyn core :: DataModel :: fuzz;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: next;
    & std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    core :: bolts :: ChildMap :: vals;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: do_serialization) {
    dyn core :: DataModel :: do_serialization;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: next;
    & std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    core :: bolts :: ChildMap :: vals;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: child) {
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < std :: vec :: Vec > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: breed) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    std :: rc :: Rc < std :: vec :: Vec > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    core :: bit_array :: BitArray :: advance_to_match;
    std :: vec :: Vec :: pop;
    std :: vec :: Vec :: pop;
    std :: vec :: Vec :: len;
    std :: io :: _print;
    std :: fmt :: Arguments :: new_const;
    std :: vec :: Vec :: len;
    std :: vec :: Vec :: push;
    dyn core :: DataModel :: parse;
    std :: rc :: Rc :: new;
    core :: context :: Context :: new;
    std :: rc :: Rc :: downgrade;
    core :: bit_array :: BitArray :: clone;
    std :: slice :: Iter < ' _, std :: boxed :: Box > :: next;
    & std :: vec :: Vec < std :: boxed :: Box > :: into_iter;
    std :: rc :: Rc < std :: vec :: Vec > :: deref;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: debug) {
    str :: to_string;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: fuzz) {
    std :: iter :: Map < std :: slice :: Iter, [closure @ src / library / union.rs : 90 : 38 : 90 : 53] > :: collect;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: map;
    core :: slice :: iter;
    std :: vec :: Vec < std :: rc :: Rc > :: deref;
    dyn core :: DataModel :: fuzz;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: fuzz :: {closure # 0}) {
    std :: rc :: Rc :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < std :: vec :: Vec > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: union :: {impl # 0} :: do_serialization) {
    dyn core :: DataModel :: do_serialization;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: clone;
    std :: vec :: Vec < std :: rc :: Rc > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: breed) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    std :: vec :: Vec :: push;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    dyn core :: DataModel :: parse;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool :: call;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: deref;
    std :: rc :: Rc < core :: context :: Context > :: clone;
    std :: rc :: Rc :: new;
    core :: context :: Context :: new;
    std :: rc :: Rc :: downgrade;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: debug) {
    str :: to_string;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: fuzz) {
    std :: vec :: Vec :: push;
    std :: rc :: Rc :: new;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    std :: vec :: Vec < std :: rc :: Rc > :: index_mut;
    std :: vec :: Vec < std :: rc :: Rc > :: clone;
    std :: vec :: IntoIter < std :: rc :: Rc > :: next;
    std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    dyn core :: DataModel :: fuzz;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: iter :: Enumerate < std :: slice :: Iter > :: next;
    std :: iter :: Enumerate < std :: slice :: Iter > :: into_iter;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: enumerate;
    core :: slice :: iter;
    std :: vec :: Vec < std :: rc :: Rc > :: deref;
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: set :: {impl # 0} :: do_serialization) {
    dyn core :: DataModel :: do_serialization;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: slice :: Iter < ' _, std :: rc :: Rc > :: next;
    & std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: new) {
    library :: u8 :: U8 :: from_u8;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: from_u8) {
    core :: bit_array :: BitArray :: new;
    std :: slice :: into_vec;
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: int) {
    core :: bit_array :: BitArray :: peek;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    core :: bit_array :: BitArray :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: breed) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    core :: bit_array :: BitArray :: eat;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: debug) {
    std :: string :: String :: write_fmt;
    std :: fmt :: Arguments :: new_v1;
    core :: fmt :: ArgumentV1 :: new_upper_hex;
    library :: u8 :: U8 :: int;
    std :: string :: String :: new;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: fuzz) {
    std :: slice :: into_vec;
    std :: rc :: Rc :: new;
    library :: u8 :: U8 :: from_u8;
    std :: rc :: Rc :: new;
    library :: u8 :: U8 :: from_u8;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: do_serialization) {
    core :: bit_array :: BitArray :: extend;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: new) {
    library :: u16 :: U16 :: from_u16;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: from_u16) {
    core :: bit_array :: BitArray :: new;
    std :: slice :: into_vec;
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: int) {
    core :: bit_array :: BitArray :: peek;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    core :: bit_array :: BitArray :: peek;
    std :: option :: Option :: unwrap;
    core :: bit_array :: BitArray :: eat;
    core :: bit_array :: BitArray :: clone;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    core :: bit_array :: BitArray :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: breed) {
    core :: panicking :: panic;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    core :: bit_array :: BitArray :: eat;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: debug) {
    std :: string :: String :: write_fmt;
    std :: fmt :: Arguments :: new_v1;
    core :: fmt :: ArgumentV1 :: new_upper_hex;
    library :: u16 :: U16 :: int;
    std :: string :: String :: new;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: fuzz) {
    std :: slice :: into_vec;
    std :: rc :: Rc :: new;
    library :: u16 :: U16 :: from_u16;
    std :: rc :: Rc :: new;
    library :: u16 :: U16 :: from_u16;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: do_serialization) {
    core :: bit_array :: BitArray :: extend;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: child) {
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: breed) {
    library :: constraint :: Constraint :: clone;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: parse) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: clone;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
    dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool :: call;
    std :: rc :: Rc < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc < core :: context :: Context >) -> bool > :: deref;
    std :: rc :: Rc :: new;
    core :: context :: Context :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: downgrade;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    dyn core :: DataModel :: parse;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: debug) {
    std :: result :: Result :: unwrap;
    std :: string :: String :: write_fmt;
    std :: fmt :: Arguments :: new_const;
    std :: string :: String :: new;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: fuzz) {
    dyn core :: DataModel :: fuzz;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_features) {
    dyn core :: DataModel :: do_features;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_vectorization) {
    dyn core :: DataModel :: do_vectorization;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_serialization) {
    dyn core :: DataModel :: do_serialization;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: new) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: clone) {
    std :: boxed :: Box :: new;
    std :: rc :: Rc < core :: DataModelBase > :: clone;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: breed) {
    library :: button :: Button :: clone;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: parse) {
    library :: button :: Button :: clone;
    core :: bit_array :: BitArray :: eat;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: debug) {
    std :: string :: String :: write_fmt;
    std :: fmt :: Arguments :: new_const;
    std :: string :: String :: new;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: fuzz) {
    std :: vec :: Vec :: new;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: name) {
    core :: DataModelBase :: name;
    std :: rc :: Rc < core :: DataModelBase > :: deref;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: set_name) {
    std :: rc :: Rc :: new;
    core :: DataModelBase :: new;
    str :: to_string;
}
Decl (andrew_fuzz :: library :: button :: {impl # 0} :: do_serialization) {
}
Decl (andrew_fuzz :: dns :: dns) {
    library :: sequence :: Sequence :: set_name;
    std :: boxed :: Box :: new;
    library :: sequence :: Sequence :: new;
    core :: bolts :: ChildMap :: from;
    std :: rc :: Rc :: new;
    library :: button :: Button :: new;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < library :: union :: Union > :: clone;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < library :: union :: Union > :: clone;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < library :: union :: Union > :: clone;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < library :: union :: Union > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: union :: Union :: set_name;
    library :: union :: Union :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: from;
    std :: rc :: Rc :: new;
    std :: slice :: into_vec;
    dyn core :: DataModel :: clone;
    std :: boxed :: Box :: new;
    library :: sequence :: Sequence :: new;
    core :: bolts :: ChildMap :: from;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: set :: Set :: set_name;
    library :: set :: Set :: new;
    std :: slice :: into_vec;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    std :: rc :: Rc :: new;
    library :: union :: Union :: set_name;
    library :: union :: Union :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    std :: slice :: into_vec;
    std :: boxed :: Box :: new;
    library :: sequence :: Sequence :: new;
    core :: bolts :: ChildMap :: from;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: constraint :: Constraint :: new;
    std :: rc :: Rc :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: boxed :: Box :: new;
    library :: sequence :: Sequence :: new;
    core :: bolts :: ChildMap :: from;
    std :: rc :: Rc :: new;
    library :: set :: Set :: new;
    std :: rc :: Rc :: new;
    std :: vec :: Vec :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: constraint :: Constraint :: new;
    std :: rc :: Rc :: new;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: sequence :: Sequence :: new;
    core :: bolts :: ChildMap :: from;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: rc :: Rc :: new;
    library :: u16 :: U16 :: new;
    std :: rc :: Rc :: new;
    library :: u8 :: U8 :: new;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: context :: Context :: child;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    dyn core :: DataModel :: child;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    std :: string :: String :: deref;
    str :: to_string;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: context :: Context :: child;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    dyn core :: DataModel :: child;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: get;
    std :: string :: String :: deref;
    str :: to_string;
    dyn core :: DataModel :: map;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    dyn core :: DataModel :: child;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: rc :: Rc < dyn core :: DataModel > :: clone;
    std :: vec :: Vec < std :: rc :: Rc > :: index;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    std :: string :: String :: deref;
    str :: to_string;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    std :: string :: String :: deref;
    str :: to_string;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    std :: string :: String :: deref;
    str :: to_string;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {
    dyn core :: DataModel :: int;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    core :: bolts :: ChildMap :: index;
    std :: string :: String :: deref;
    str :: to_string;
    core :: context :: Context :: map;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    core :: context :: Context :: parent;
    std :: rc :: Rc < core :: context :: Context > :: deref;
    std :: vec :: Vec :: len;
    core :: context :: Context :: vec;
    std :: rc :: Rc < core :: context :: Context > :: deref;
}
Decl (andrew_fuzz :: main) {
    std :: io :: _print;
    std :: fmt :: Arguments :: new_const;
    core :: bit_array :: BitArray :: to_file;
    str :: to_string;
    dyn core :: DataModel :: serialize;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: vec :: Vec :: push;
    dyn core :: DataModel :: vectorize;
    std :: rc :: Rc < dyn core :: DataModel > :: deref;
    std :: vec :: IntoIter < std :: rc :: Rc > :: next;
    std :: vec :: Vec < std :: rc :: Rc > :: into_iter;
    std :: vec :: Vec :: new;
    dyn core :: DataModel :: fuzz;
    std :: option :: Option :: unwrap;
    dyn core :: DataModel :: parse;
    std :: rc :: Rc :: new;
    core :: context :: Context :: new;
    std :: rc :: Weak :: new;
    std :: result :: Result :: unwrap;
    core :: bit_array :: BitArray :: from_file;
    str :: to_string;
    dns :: dns;
}
