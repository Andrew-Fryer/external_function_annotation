Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : new) {
    std : : rc : : Rc : : < std : : cell : : RefCell > : : new;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : new;
    std : : vec : : Vec : : < u8 > : : len;
    core : : panicking : : panic;
    std : : vec : : Vec : : < u8 > : : len;
    std : : vec : : Vec : : index_mut;
    std : : vec : : Vec : : index_mut;
    std : : vec : : Vec : : < u8 > : : len;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : fresh) {
    core : : bit_array : : BitArray : : new;
    std : : vec : : Vec : : < u8 > : : new;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : from_file) {
    std : : result : : Result : : < std : : vec : : Vec, std : : io : : Error > : : map : : < core : : bit_array : : BitArray, [closure @ src / core / bit_array.rs : 52 : 33 : 52 : 38] >;
    std : : fs : : read : : < & std : : path : : Path >;
    std : : path : : Path : : new : : < std : : string : : String >;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : from_file : : {closure # 0}) {
    core : : bit_array : : BitArray : : new;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : to_file) {
    std : : fs : : write : : < std : : string : : String, & std : : vec : : Vec >;
    std : : vec : : Vec : : as_ref;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : clone) {
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : peek) {
    std : : vec : : Vec : : index;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : index;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : index;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
    core : : panicking : : panic;
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : clean_offset) {
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : clean_end_offset) {
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : len) {
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : eat) {
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : advance) {
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : matching_data) {
    std : : rc : : Rc : : eq;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : advance_to_match) {
    core : : bit_array : : BitArray : : advance;
    core : : panicking : : panic;
    core : : bit_array : : BitArray : : pos;
    core : : bit_array : : BitArray : : pos;
    core : : panicking : : panic;
    core : : bit_array : : BitArray : : matching_data;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : pos) {
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : extend) {
    std : : vec : : Vec : : < u8 > : : push;
    std : : cell : : RefMut : : deref_mut;
    core : : bit_array : : BitArray : : peek;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : peek;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    std : : vec : : Vec : : index_mut;
    std : : cell : : RefMut : : deref_mut;
    std : : vec : : Vec : : < u8 > : : len;
    std : : cell : : RefMut : : deref;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : clean_end_offset;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow_mut;
    std : : rc : : Rc : : deref;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : clone;
    std : : rc : : Rc : : < std : : cell : : RefCell > : : new;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : new;
    std : : vec : : Vec : : clone;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < u8 > : : len;
    std : : cell : : Ref : : deref;
    std : : cell : : RefCell : : < std : : vec : : Vec > : : borrow;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : add_assign) {
    core : : bit_array : : BitArray : : extend;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : eq) {
    core : : bit_array : : BitArray : : peek;
    core : : bit_array : : BitArray : : peek;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : clone;
    core : : bit_array : : BitArray : : clone;
    core : : bit_array : : BitArray : : len;
    core : : bit_array : : BitArray : : len;
}
Decl (andrew_fuzz : : core : : bit_array : : {impl # 0} : : fmt) {
    std : : io : : _print;
    std : : fmt : : Arguments : : < ' _ > : : new_v1_formatted;
    core : : fmt : : UnsafeArg : : new;
    std : : fmt : : rt : : v1 : : Argument : : new;
    std : : fmt : : rt : : v1 : : Count : : Is;
    core : : fmt : : ArgumentV1 : : < ' _ > : : new_debug : : < std : : rc : : Rc >;
}
Decl (andrew_fuzz : : core : : feature_vector : : {impl # 0} : : new) {
    std : : collections : : HashMap : : < std : : string : : String, f64 > : : insert;
    std : : string : : String : : to_string;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
    std : : collections : : HashMap : : < std : : string : : String, f64 > : : new;
}
Decl (andrew_fuzz : : core : : feature_vector : : {impl # 0} : : tally) {
    std : : f64 : : < impl f64 > : : powi;
    std : : option : : Option : : < & mut f64 > : : unwrap;
    std : : collections : : HashMap : : < std : : string : : String, f64 > : : get_mut : : < std : : string : : String >;
}
Decl (andrew_fuzz : : core : : feature_vector : : {impl # 0} : : values) {
    std : : vec : : Vec : : < f64 > : : push;
    std : : option : : Option : : < & f64 > : : unwrap;
    std : : collections : : HashMap : : < std : : string : : String, f64 > : : get : : < std : : string : : String >;
    std : : string : : String : : to_string;
    std : : slice : : Iter : : next;
    std : : slice : : Iter : : into_iter;
    core : : slice : : < impl [std : : string : : String] > : : iter;
    std : : vec : : Vec : : deref;
    std : : vec : : Vec : : < f64 > : : new;
}
Decl (andrew_fuzz : : core : : feature_vector : : {impl # 0} : : dist) {
    std : : f64 : : < impl f64 > : : powi;
    < & f64 as std : : ops : : Sub > : : sub;
    std : : iter : : Zip : : next;
    std : : iter : : Zip : : into_iter;
    std : : slice : : Iter : : zip : : < std : : slice : : Iter >;
    core : : slice : : < impl [f64] > : : iter;
    std : : vec : : Vec : : deref;
    core : : feature_vector : : FeatureVector : : values;
    core : : slice : : < impl [f64] > : : iter;
    std : : vec : : Vec : : deref;
    core : : feature_vector : : FeatureVector : : values;
    core : : panicking : : panic;
    std : : vec : : Vec : : eq;
    std : : slice : : Iter : : collect : : < std : : vec : : Vec >;
    core : : feature_vector : : FeatureVector : : features;
    std : : slice : : Iter : : collect : : < std : : vec : : Vec >;
    core : : feature_vector : : FeatureVector : : features;
}
Decl (andrew_fuzz : : core : : feature_vector : : {impl # 0} : : features) {
    core : : slice : : < impl [std : : string : : String] > : : iter;
    std : : vec : : Vec : : deref;
}
Decl (andrew_fuzz : : core : : context : : {impl # 0} : : new) {
}
Decl (andrew_fuzz : : core : : context : : {impl # 0} : : parent) {
    std : : rc : : Rc : : clone;
    std : : option : : Option : : < std : : rc : : Rc > : : unwrap;
    std : : rc : : Weak : : < core : : context : : Context > : : upgrade;
}
Decl (andrew_fuzz : : core : : context : : {impl # 0} : : child) {
    core : : panicking : : panic;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : context : : {impl # 0} : : vec) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : context : : {impl # 0} : : map) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : empty) {
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : clone) {
    std : : vec : : Vec : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : vals) {
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : push) {
    std : : vec : : Vec : : < std : : rc : : Rc > : : push;
    core : : panicking : : panic;
    std : : collections : : HashMap : : < & str, usize > : : len;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : get) {
    std : : option : : Option : : < & std : : rc : : Rc > : : map : : < std : : rc : : Rc, [closure @ src / core / bolts.rs : 36 : 34 : 36 : 38] >;
    core : : slice : : < impl [std : : rc : : Rc] > : : get : : < usize >;
    std : : vec : : Vec : : deref;
    std : : collections : : HashMap : : < & str, usize > : : get : : < str >;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : get : : {closure # 0}) {
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : {constant # 0}) {
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : from) {
    std : : rc : : Rc : : < std : : collections : : HashMap > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : push;
    std : : rc : : Rc : : clone;
    core : : panicking : : panic;
    std : : option : : Option : : eq;
    std : : collections : : HashMap : : < & str, usize > : : insert;
    std : : iter : : Enumerate : : next;
    std : : iter : : Enumerate : : into_iter;
    std : : slice : : Iter : : enumerate;
    core : : slice : : < impl [(& str, std : : rc : : Rc)] > : : iter;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : collections : : HashMap : : < & str, usize > : : new;
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : from : : {constant # 0}) {
}
Decl (andrew_fuzz : : core : : bolts : : {impl # 0} : : index) {
    std : : vec : : Vec : : index;
    std : : collections : : HashMap : : index;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : core : : {impl # 0} : : new) {
}
Decl (andrew_fuzz : : core : : {impl # 0} : : name) {
}
Decl (andrew_fuzz : : core : : Contextual : : child) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Contextual : : vec) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Contextual : : map) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Contextual : : data) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Contextual : : int) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Contextual : : str) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : core : : Ast : : debug) {
    std : : result : : Result : : < (), std : : fmt : : Error > : : expect;
    std : : string : : String : : write_fmt;
    std : : fmt : : Arguments : : < ' _ > : : new_v1;
    core : : fmt : : ArgumentV1 : : < ' _ > : : new_display : : < & std : : string : : String >;
    Self : : name;
    std : : string : : String : : new;
}
Decl (andrew_fuzz : : core : : Vectorizer : : do_features) {
    std : : collections : : HashSet : : < std : : string : : String > : : insert;
    std : : string : : String : : to_string;
    Self : : name;
}
Decl (andrew_fuzz : : core : : Vectorizer : : features) {
    core : : feature_vector : : FeatureVector : : new;
    std : : collections : : hash_set : : IntoIter : : collect : : < std : : vec : : Vec >;
    std : : collections : : HashSet : : into_iter;
    Self : : do_features;
    std : : collections : : HashSet : : < std : : string : : String > : : new;
}
Decl (andrew_fuzz : : core : : Vectorizer : : do_vectorization) {
    core : : feature_vector : : FeatureVector : : tally;
    str : : to_string;
}
Decl (andrew_fuzz : : core : : Vectorizer : : vectorize) {
    Self : : do_vectorization;
    Self : : features;
}
Decl (andrew_fuzz : : core : : Serializer : : serialize) {
    Self : : do_serialization;
    core : : bit_array : : BitArray : : fresh;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : new) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : map) {
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    core : : bolts : : ChildMap : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : breed) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    std : : rc : : Rc : : clone;
    core : : bolts : : ChildMap : : push;
    std : : rc : : Rc : : from;
    < dyn core : : DataModel as core : : Parser > : : parse;
    std : : rc : : Rc : : < core : : context : : Context > : : new;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : new;
    std : : rc : : Rc : : < core : : context : : Context > : : downgrade;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
    core : : bolts : : ChildMap : : vals;
    core : : bolts : : ChildMap : : empty;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : debug) {
    str : : to_string;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : fuzz) {
    std : : vec : : Vec : : < std : : rc : : Rc > : : push;
    std : : rc : : Rc : : < library : : sequence : : Sequence > : : new;
    std : : rc : : Rc : : clone;
    core : : bolts : : ChildMap : : push;
    std : : rc : : Rc : : from;
    core : : bolts : : ChildMap : : clone;
    std : : vec : : IntoIter : : next;
    std : : vec : : Vec : : into_iter;
    < dyn core : : DataModel as core : : Fuzzer > : : fuzz;
    std : : rc : : Rc : : deref;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
    core : : bolts : : ChildMap : : vals;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : sequence : : {impl # 0} : : do_serialization) {
    < dyn core : : DataModel as core : : Serializer > : : do_serialization;
    std : : rc : : Rc : : deref;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
    core : : bolts : : ChildMap : : vals;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : new) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : child) {
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : union : : Union > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : breed) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : union : : Union > : : new;
    std : : rc : : Rc : : from;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    core : : bit_array : : BitArray : : advance_to_match;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : pop;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : pop;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : len;
    std : : io : : _print;
    std : : fmt : : Arguments : : < ' _ > : : new_const;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : len;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : push;
    < dyn core : : DataModel as core : : Parser > : : parse;
    std : : rc : : Rc : : < core : : context : : Context > : : new;
    core : : context : : Context : : < ' _ > : : new;
    std : : rc : : Rc : : < core : : context : : Context > : : downgrade;
    core : : bit_array : : BitArray : : clone;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < (std : : boxed : : Box, core : : bit_array : : BitArray) > : : new;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : debug) {
    str : : to_string;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : fuzz) {
    std : : iter : : Map : : collect : : < std : : vec : : Vec >;
    std : : slice : : Iter : : map : : < std : : rc : : Rc, [closure @ src / library / union.rs : 90 : 38 : 90 : 53] >;
    core : : slice : : < impl [std : : rc : : Rc] > : : iter;
    std : : vec : : Vec : : deref;
    < dyn core : : DataModel as core : : Fuzzer > : : fuzz;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : fuzz : : {closure # 0}) {
    std : : rc : : Rc : : < library : : union : : Union > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : union : : {impl # 0} : : do_serialization) {
    < dyn core : : DataModel as core : : Serializer > : : do_serialization;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : new) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : set : : Set > : : new;
    std : : rc : : Rc : : clone;
    std : : vec : : Vec : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : breed) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : set : : Set > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : vec : : Vec : : < std : : rc : : Rc > : : push;
    std : : rc : : Rc : : from;
    < dyn core : : DataModel as core : : Parser > : : parse;
    std : : rc : : Rc : : deref;
    < dyn for < ' a > std : : ops : : Fn (std : : rc : : Rc) - > bool as std : : ops : : Fn > : : call;
    std : : rc : : Rc : : deref;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < core : : context : : Context > : : new;
    core : : context : : Context : : < ' _ > : : new;
    std : : rc : : Rc : : < core : : context : : Context > : : downgrade;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : debug) {
    str : : to_string;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : fuzz) {
    std : : vec : : Vec : : < std : : rc : : Rc > : : push;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : from;
    std : : vec : : Vec : : index_mut;
    std : : vec : : Vec : : clone;
    std : : vec : : IntoIter : : next;
    std : : vec : : Vec : : into_iter;
    < dyn core : : DataModel as core : : Fuzzer > : : fuzz;
    std : : rc : : Rc : : deref;
    std : : iter : : Enumerate : : next;
    std : : iter : : Enumerate : : into_iter;
    std : : slice : : Iter : : enumerate;
    core : : slice : : < impl [std : : rc : : Rc] > : : iter;
    std : : vec : : Vec : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : set : : {impl # 0} : : do_serialization) {
    < dyn core : : DataModel as core : : Serializer > : : do_serialization;
    std : : rc : : Rc : : deref;
    std : : slice : : Iter : : next;
    < & std : : vec : : Vec as std : : iter : : IntoIterator > : : into_iter;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : new) {
    library : : u8 : : U8 : : from_u8;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : from_u8) {
    core : : bit_array : : BitArray : : new;
    std : : slice : : < impl [u8] > : : into_vec : : < std : : alloc : : Global >;
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : int) {
    core : : bit_array : : BitArray : : peek;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : u8 : : U8 > : : new;
    core : : bit_array : : BitArray : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : breed) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : u8 : : U8 > : : new;
    std : : rc : : Rc : : clone;
    core : : bit_array : : BitArray : : eat;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : debug) {
    std : : string : : String : : write_fmt;
    std : : fmt : : Arguments : : < ' _ > : : new_v1;
    core : : fmt : : ArgumentV1 : : < ' _ > : : new_upper_hex : : < i32 >;
    library : : u8 : : U8 : : int;
    std : : string : : String : : new;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : fuzz) {
    std : : slice : : < impl [std : : rc : : Rc] > : : into_vec : : < std : : alloc : : Global >;
    std : : rc : : Rc : : < library : : u8 : : U8 > : : new;
    library : : u8 : : U8 : : from_u8;
    std : : rc : : Rc : : < library : : u8 : : U8 > : : new;
    library : : u8 : : U8 : : from_u8;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : u8 : : {impl # 0} : : do_serialization) {
    core : : bit_array : : BitArray : : extend;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : new) {
    library : : u16 : : U16 : : from_u16;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : from_u16) {
    core : : bit_array : : BitArray : : new;
    std : : slice : : < impl [u8] > : : into_vec : : < std : : alloc : : Global >;
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : int) {
    core : : bit_array : : BitArray : : peek;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    core : : bit_array : : BitArray : : peek;
    std : : option : : Option : : < core : : bit_array : : BitArray > : : unwrap;
    core : : bit_array : : BitArray : : eat;
    core : : bit_array : : BitArray : : clone;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : u16 : : U16 > : : new;
    core : : bit_array : : BitArray : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : breed) {
    core : : panicking : : panic;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : u16 : : U16 > : : new;
    std : : rc : : Rc : : clone;
    core : : bit_array : : BitArray : : eat;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : debug) {
    std : : string : : String : : write_fmt;
    std : : fmt : : Arguments : : < ' _ > : : new_v1;
    core : : fmt : : ArgumentV1 : : < ' _ > : : new_upper_hex : : < i32 >;
    library : : u16 : : U16 : : int;
    std : : string : : String : : new;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : fuzz) {
    std : : slice : : < impl [std : : rc : : Rc] > : : into_vec : : < std : : alloc : : Global >;
    std : : rc : : Rc : : < library : : u16 : : U16 > : : new;
    library : : u16 : : U16 : : from_u16;
    std : : rc : : Rc : : < library : : u16 : : U16 > : : new;
    library : : u16 : : U16 : : from_u16;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : u16 : : {impl # 0} : : do_serialization) {
    core : : bit_array : : BitArray : : extend;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : new) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : child) {
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : constraint : : Constraint > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : breed) {
    library : : constraint : : Constraint : : clone;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : parse) {
    std : : boxed : : Box : : < library : : constraint : : Constraint > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    < dyn for < ' a > std : : ops : : Fn (std : : rc : : Rc) - > bool as std : : ops : : Fn > : : call;
    std : : rc : : Rc : : deref;
    std : : rc : : Rc : : < core : : context : : Context > : : new;
    core : : context : : Context : : < ' _ > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < core : : context : : Context > : : downgrade;
    std : : rc : : Rc : : from;
    < dyn core : : DataModel as core : : Parser > : : parse;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : debug) {
    std : : result : : Result : : < (), std : : fmt : : Error > : : unwrap;
    std : : string : : String : : write_fmt;
    std : : fmt : : Arguments : : < ' _ > : : new_const;
    std : : string : : String : : new;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : fuzz) {
    < dyn core : : DataModel as core : : Fuzzer > : : fuzz;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : do_features) {
    < dyn core : : DataModel as core : : Vectorizer > : : do_features;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : do_vectorization) {
    < dyn core : : DataModel as core : : Vectorizer > : : do_vectorization;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : constraint : : {impl # 0} : : do_serialization) {
    < dyn core : : DataModel as core : : Serializer > : : do_serialization;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : new) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : clone) {
    std : : boxed : : Box : : < library : : button : : Button > : : new;
    std : : rc : : Rc : : clone;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : breed) {
    library : : button : : Button : : clone;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : parse) {
    library : : button : : Button : : clone;
    core : : bit_array : : BitArray : : eat;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : debug) {
    std : : string : : String : : write_fmt;
    std : : fmt : : Arguments : : < ' _ > : : new_const;
    std : : string : : String : : new;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : fuzz) {
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : name) {
    core : : DataModelBase : : name;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : set_name) {
    std : : rc : : Rc : : < core : : DataModelBase > : : new;
    core : : DataModelBase : : new;
    str : : to_string;
}
Decl (andrew_fuzz : : library : : button : : {impl # 0} : : do_serialization) {
}
Decl (andrew_fuzz : : dns : : dns) {
    library : : sequence : : Sequence : : set_name;
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    library : : sequence : : Sequence : : new;
    core : : bolts : : ChildMap : : from;
    std : : rc : : Rc : : < library : : button : : Button > : : new;
    library : : button : : Button : : new;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 66 : 86 : 66 : 91] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 65 : 85 : 65 : 90] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 64 : 82 : 64 : 87] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 63 : 84 : 63 : 89] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : union : : Union > : : new;
    library : : union : : Union : : set_name;
    library : : union : : Union : : new;
    std : : rc : : Rc : : from;
    std : : rc : : Rc : : < std : : vec : : Vec > : : new;
    std : : slice : : < impl [std : : boxed : : Box] > : : into_vec : : < std : : alloc : : Global >;
    < dyn core : : DataModel as core : : Cloneable > : : clone;
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    library : : sequence : : Sequence : : new;
    core : : bolts : : ChildMap : : from;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 50 : 70 : 50 : 75] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : set_name;
    library : : set : : Set : : new;
    std : : slice : : < impl [std : : rc : : Rc] > : : into_vec : : < std : : alloc : : Global >;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 27 : 69 : 27 : 74] > : : new;
    std : : rc : : Rc : : < library : : union : : Union > : : new;
    library : : union : : Union : : set_name;
    library : : union : : Union : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < std : : vec : : Vec > : : new;
    std : : slice : : < impl [std : : boxed : : Box] > : : into_vec : : < std : : alloc : : Global >;
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    library : : sequence : : Sequence : : new;
    core : : bolts : : ChildMap : : from;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : constraint : : Constraint > : : new;
    library : : constraint : : Constraint : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 21 : 71 : 21 : 76] > : : new;
    std : : rc : : Rc : : clone;
    std : : boxed : : Box : : < library : : sequence : : Sequence > : : new;
    library : : sequence : : Sequence : : new;
    core : : bolts : : ChildMap : : from;
    std : : rc : : Rc : : < library : : set : : Set > : : new;
    library : : set : : Set : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 18 : 77 : 18 : 82] > : : new;
    std : : vec : : Vec : : < std : : rc : : Rc > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : constraint : : Constraint > : : new;
    library : : constraint : : Constraint : : new;
    std : : rc : : Rc : : < [closure @ src / dns.rs : 17 : 71 : 17 : 76] > : : new;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : sequence : : Sequence > : : new;
    library : : sequence : : Sequence : : new;
    core : : bolts : : ChildMap : : from;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : clone;
    std : : rc : : Rc : : < library : : u16 : : U16 > : : new;
    library : : u16 : : U16 : : new;
    std : : rc : : Rc : : < library : : u8 : : U8 > : : new;
    library : : u8 : : U8 : : new;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : child;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    < dyn core : : DataModel as core : : Contextual > : : child;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    std : : string : : String : : deref;
    str : : to_string;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : child;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    < dyn core : : DataModel as core : : Contextual > : : child;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : get;
    std : : string : : String : : deref;
    str : : to_string;
    < dyn core : : DataModel as core : : Contextual > : : map;
    std : : rc : : Rc : : deref;
    < dyn core : : DataModel as core : : Contextual > : : child;
    std : : rc : : Rc : : deref;
    std : : rc : : Rc : : clone;
    std : : vec : : Vec : : index;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    std : : string : : String : : deref;
    str : : to_string;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    std : : string : : String : : deref;
    str : : to_string;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    std : : string : : String : : deref;
    str : : to_string;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : dns : : dns : : {closure # 0}) {
    < dyn core : : DataModel as core : : Contextual > : : int;
    std : : rc : : Rc : : deref;
    core : : bolts : : ChildMap : : index;
    std : : string : : String : : deref;
    str : : to_string;
    core : : context : : Context : : < ' _ > : : map;
    std : : rc : : Rc : : deref;
    core : : context : : Context : : < ' _ > : : parent;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < std : : rc : : Rc > : : len;
    core : : context : : Context : : < ' _ > : : vec;
    std : : rc : : Rc : : deref;
}
Decl (andrew_fuzz : : main) {
    std : : io : : _print;
    std : : fmt : : Arguments : : < ' _ > : : new_const;
    core : : bit_array : : BitArray : : to_file;
    str : : to_string;
    < dyn core : : DataModel as core : : Serializer > : : serialize;
    std : : rc : : Rc : : deref;
    std : : vec : : Vec : : < core : : feature_vector : : FeatureVector > : : push;
    < dyn core : : DataModel as core : : Vectorizer > : : vectorize;
    std : : rc : : Rc : : deref;
    std : : vec : : IntoIter : : next;
    std : : vec : : Vec : : into_iter;
    std : : vec : : Vec : : < core : : feature_vector : : FeatureVector > : : new;
    < dyn core : : DataModel as core : : Fuzzer > : : fuzz;
    std : : option : : Option : : < std : : boxed : : Box > : : unwrap;
    < dyn core : : DataModel as core : : Parser > : : parse;
    std : : rc : : Rc : : < core : : context : : Context > : : new;
    core : : context : : Context : : < ' _ > : : new;
    std : : rc : : Weak : : < core : : context : : Context > : : new;
    std : : result : : Result : : < core : : bit_array : : BitArray, std : : io : : Error > : : unwrap;
    core : : bit_array : : BitArray : : from_file;
    str : : to_string;
    dns : : dns;
}
