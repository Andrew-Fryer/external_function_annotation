{
    " andrew_fuzz :: core :: bit_array :: {impl # 0} :: new " : [
        " dns :: dns;
        ", " str :: to_string;
        ", " core :: bit_array :: BitArray :: from_file;
        ", " std :: result :: Result :: unwrap;
        ", " std :: rc :: Weak :: new;
        ", " core :: context :: Context :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: DataModel :: parse;
        ", " std :: option :: Option :: unwrap;
        ", " core :: DataModel :: fuzz;
        ", " std :: vec :: Vec :: new;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: vec :: IntoIter :: next;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: vectorize;
        ", " std :: vec :: Vec :: push;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: serialize;
        ", " str :: to_string;
        ", " core :: bit_array :: BitArray :: to_file;
        ", " std :: fmt :: Arguments :: new_const;
        ", "} Decl (andrew_fuzz :: main) {std :: io :: _print;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: vec :: Vec :: index;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: child;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: get;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: child;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: child;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: vec;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: parent;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: map;
        ", " str :: to_string;
        ", " std :: string :: String :: deref;
        ", " core :: bolts :: ChildMap :: index;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: child;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " std :: rc :: Rc :: deref;
        ", " core :: context :: Context :: child;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: dns :: dns :: {closure # 0}) {core :: DataModel :: int;
        ", " library :: u8 :: U8 :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: u16 :: U16 :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bolts :: ChildMap :: from;
        ", " library :: sequence :: Sequence :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: new;
        ", " library :: constraint :: Constraint :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: bolts :: ChildMap :: from;
        ", " library :: sequence :: Sequence :: new;
        ", " std :: boxed :: Box :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: new;
        ", " library :: constraint :: Constraint :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bolts :: ChildMap :: from;
        ", " library :: sequence :: Sequence :: new;
        ", " std :: boxed :: Box :: new;
        ", " std :: slice :: into_vec;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " library :: union :: Union :: new;
        ", " library :: union :: Union :: set_name;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: slice :: into_vec;
        ", " library :: set :: Set :: new;
        ", " library :: set :: Set :: set_name;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: bolts :: ChildMap :: from;
        ", " library :: sequence :: Sequence :: new;
        ", " std :: boxed :: Box :: new;
        ", " core :: DataModel :: clone;
        ", " std :: slice :: into_vec;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: from;
        ", " library :: union :: Union :: new;
        ", " library :: union :: Union :: set_name;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: set :: Set :: new;
        ", " std :: rc :: Rc :: new;
        ", " library :: button :: Button :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: bolts :: ChildMap :: from;
        ", " library :: sequence :: Sequence :: new;
        ", " std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: do_serialization) {} Decl (andrew_fuzz :: dns :: dns) {library :: sequence :: Sequence :: set_name;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: fuzz) {std :: vec :: Vec :: new;
        ", " std :: string :: String :: new;
        ", " std :: fmt :: Arguments :: new_const;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: debug) {std :: string :: String :: write_fmt;
        ", " core :: bit_array :: BitArray :: eat;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: parse) {library :: button :: Button :: clone;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: breed) {library :: button :: Button :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: button :: {impl # 0} :: new) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_serialization) {core :: DataModel :: do_serialization;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_vectorization) {core :: DataModel :: do_vectorization;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: do_features) {core :: DataModel :: do_features;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: fuzz) {core :: DataModel :: fuzz;
        ", " std :: string :: String :: new;
        ", " std :: fmt :: Arguments :: new_const;
        ", " std :: string :: String :: write_fmt;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: debug) {std :: result :: Result :: unwrap;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: parse;
        ", " std :: rc :: Rc :: from;
        ", " std :: rc :: Rc :: downgrade;
        ", " std :: rc :: Rc :: clone;
        ", " core :: context :: Context :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", " < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc) -> bool as std :: ops :: Fn > :: call;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: breed) {library :: constraint :: Constraint :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: child) {std :: rc :: Rc :: clone;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: constraint :: {impl # 0} :: new) {std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: do_serialization) {core :: bit_array :: BitArray :: extend;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " library :: u16 :: U16 :: from_u16;
        ", " std :: rc :: Rc :: new;
        ", " library :: u16 :: U16 :: from_u16;
        ", " std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: fuzz) {std :: slice :: into_vec;
        ", " std :: string :: String :: new;
        ", " library :: u16 :: U16 :: int;
        ", " core :: fmt :: ArgumentV1 :: new_upper_hex;
        ", " std :: fmt :: Arguments :: new_v1;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: debug) {std :: string :: String :: write_fmt;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: breed) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bit_array :: BitArray :: clone;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", " core :: bit_array :: BitArray :: clone;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", " core :: bit_array :: BitArray :: peek;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: int) {core :: bit_array :: BitArray :: peek;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: slice :: into_vec;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: from_u16) {core :: bit_array :: BitArray :: new;
        ", "} Decl (andrew_fuzz :: library :: u16 :: {impl # 0} :: new) {library :: u16 :: U16 :: from_u16;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: do_serialization) {core :: bit_array :: BitArray :: extend;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " library :: u8 :: U8 :: from_u8;
        ", " std :: rc :: Rc :: new;
        ", " library :: u8 :: U8 :: from_u8;
        ", " std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: fuzz) {std :: slice :: into_vec;
        ", " std :: string :: String :: new;
        ", " library :: u8 :: U8 :: int;
        ", " core :: fmt :: ArgumentV1 :: new_upper_hex;
        ", " std :: fmt :: Arguments :: new_v1;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: debug) {std :: string :: String :: write_fmt;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: breed) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bit_array :: BitArray :: clone;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: int) {core :: bit_array :: BitArray :: peek;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: slice :: into_vec;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: from_u8) {core :: bit_array :: BitArray :: new;
        ", "} Decl (andrew_fuzz :: library :: u8 :: {impl # 0} :: new) {library :: u8 :: U8 :: from_u8;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: do_serialization) {core :: DataModel :: do_serialization;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " std :: vec :: Vec :: new;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: iter;
        ", " std :: slice :: Iter :: enumerate;
        ", " std :: iter :: Enumerate :: into_iter;
        ", " std :: iter :: Enumerate :: next;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: fuzz;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: vec :: IntoIter :: next;
        ", " std :: vec :: Vec :: clone;
        ", " std :: vec :: Vec :: index_mut;
        ", " std :: rc :: Rc :: from;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: fuzz) {std :: vec :: Vec :: push;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: debug) {str :: to_string;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: downgrade;
        ", " core :: context :: Context :: new;
        ", " std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: deref;
        ", " < dyn for < ' a > std :: ops :: Fn (std :: rc :: Rc) -> bool as std :: ops :: Fn > :: call;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: parse;
        ", " std :: rc :: Rc :: from;
        ", " std :: vec :: Vec :: push;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: breed) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: set :: {impl # 0} :: new) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: do_serialization) {core :: DataModel :: do_serialization;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: fuzz :: {closure # 0}) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: fuzz;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: iter;
        ", " std :: slice :: Iter :: map;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: fuzz) {std :: iter :: Map :: collect;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: debug) {str :: to_string;
        ", " std :: vec :: Vec :: new;
        ", " std :: rc :: Rc :: deref;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " core :: bit_array :: BitArray :: clone;
        ", " std :: rc :: Rc :: downgrade;
        ", " core :: context :: Context :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: DataModel :: parse;
        ", " std :: vec :: Vec :: push;
        ", " std :: vec :: Vec :: len;
        ", " std :: fmt :: Arguments :: new_const;
        ", " std :: io :: _print;
        ", " std :: vec :: Vec :: len;
        ", " std :: vec :: Vec :: pop;
        ", " std :: vec :: Vec :: pop;
        ", " core :: bit_array :: BitArray :: advance_to_match;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: from;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: breed) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: child) {std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: union :: {impl # 0} :: new) {std :: rc :: Rc :: new;
        ", " core :: bolts :: ChildMap :: vals;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: do_serialization) {core :: DataModel :: do_serialization;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: set_name) {std :: rc :: Rc :: new;
        ", " std :: rc :: Rc :: deref;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: name) {core :: DataModelBase :: name;
        ", " std :: vec :: Vec :: new;
        ", " core :: bolts :: ChildMap :: vals;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: rc :: Rc :: deref;
        ", " core :: DataModel :: fuzz;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: vec :: IntoIter :: next;
        ", " core :: bolts :: ChildMap :: clone;
        ", " std :: rc :: Rc :: from;
        ", " core :: bolts :: ChildMap :: push;
        ", " std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: fuzz) {std :: vec :: Vec :: push;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: debug) {str :: to_string;
        ", " core :: bolts :: ChildMap :: empty;
        ", " core :: bolts :: ChildMap :: vals;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: rc :: Rc :: downgrade;
        ", " core :: context :: Context :: new;
        ", " std :: rc :: Rc :: deref;
        ", " std :: rc :: Rc :: new;
        ", " core :: DataModel :: parse;
        ", " std :: rc :: Rc :: from;
        ", " core :: bolts :: ChildMap :: push;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: parse) {std :: boxed :: Box :: new;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: breed) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bolts :: ChildMap :: clone;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: map) {} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: clone) {std :: boxed :: Box :: new;
        ", " str :: to_string;
        ", " core :: DataModelBase :: new;
        ", "} Decl (andrew_fuzz :: library :: sequence :: {impl # 0} :: new) {std :: rc :: Rc :: new;
        ", " core :: bit_array :: BitArray :: fresh;
        ", "} Decl (andrew_fuzz :: core :: Serializer :: serialize) {Self :: do_serialization;
        ", " Self :: features;
        ", "} Decl (andrew_fuzz :: core :: Vectorizer :: vectorize) {Self :: do_vectorization;
        ", " str :: to_string;
        ", "} Decl (andrew_fuzz :: core :: Vectorizer :: do_vectorization) {core :: feature_vector :: FeatureVector :: tally;
        ", " std :: collections :: HashSet :: new;
        ", " Self :: do_features;
        ", " std :: collections :: HashSet :: into_iter;
        ", " std :: collections :: hash_set :: IntoIter :: collect;
        ", "} Decl (andrew_fuzz :: core :: Vectorizer :: features) {core :: feature_vector :: FeatureVector :: new;
        ", " Self :: name;
        ", " std :: string :: String :: to_string;
        ", "} Decl (andrew_fuzz :: core :: Vectorizer :: do_features) {std :: collections :: HashSet :: insert;
        ", " std :: string :: String :: new;
        ", " Self :: name;
        ", " core :: fmt :: ArgumentV1 :: new_display;
        ", " std :: fmt :: Arguments :: new_v1;
        ", " std :: string :: String :: write_fmt;
        ", "} Decl (andrew_fuzz :: core :: Ast :: debug) {std :: result :: Result :: expect;
        ", "} Decl (andrew_fuzz :: core :: Contextual :: str) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: Contextual :: int) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: Contextual :: data) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: Contextual :: map) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: Contextual :: vec) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: {impl # 0} :: new) {} Decl (andrew_fuzz :: core :: {impl # 0} :: name) {} Decl (andrew_fuzz :: core :: Contextual :: child) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: deref;
        ", " std :: collections :: HashMap :: index;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: from :: {constant # 0}) {} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: index) {std :: vec :: Vec :: index;
        ", " std :: collections :: HashMap :: new;
        ", " std :: vec :: Vec :: new;
        ", " core :: slice :: iter;
        ", " std :: slice :: Iter :: enumerate;
        ", " std :: iter :: Enumerate :: into_iter;
        ", " std :: iter :: Enumerate :: next;
        ", " std :: collections :: HashMap :: insert;
        ", " std :: option :: Option :: eq;
        ", " core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: push;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: {constant # 0}) {} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: from) {std :: rc :: Rc :: new;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: get :: {closure # 0}) {std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: deref;
        ", " std :: collections :: HashMap :: get;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: get;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: get) {std :: option :: Option :: map;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " std :: collections :: HashMap :: len;
        ", " core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: vals) {} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: push) {std :: vec :: Vec :: push;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: clone) {std :: vec :: Vec :: clone;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: core :: bolts :: {impl # 0} :: empty) {std :: vec :: Vec :: new;
        ", "} Decl (andrew_fuzz :: core :: context :: {impl # 0} :: map) {core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: context :: {impl # 0} :: vec) {core :: panicking :: panic;
        ", " std :: rc :: Rc :: clone;
        ", "} Decl (andrew_fuzz :: core :: context :: {impl # 0} :: child) {core :: panicking :: panic;
        ", " std :: rc :: Weak :: upgrade;
        ", " std :: option :: Option :: unwrap;
        ", "} Decl (andrew_fuzz :: core :: context :: {impl # 0} :: new) {} Decl (andrew_fuzz :: core :: context :: {impl # 0} :: parent) {std :: rc :: Rc :: clone;
        ", " std :: vec :: Vec :: deref;
        ", "} Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: features) {core :: slice :: iter;
        ", " core :: feature_vector :: FeatureVector :: features;
        ", " std :: slice :: Iter :: collect;
        ", " core :: feature_vector :: FeatureVector :: features;
        ", " std :: slice :: Iter :: collect;
        ", " std :: vec :: Vec :: eq;
        ", " core :: panicking :: panic;
        ", " core :: feature_vector :: FeatureVector :: values;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: iter;
        ", " core :: feature_vector :: FeatureVector :: values;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: iter;
        ", " std :: slice :: Iter :: zip;
        ", " std :: iter :: Zip :: into_iter;
        ", " std :: iter :: Zip :: next;
        ", " f64 :: sub;
        ", "} Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: dist) {std :: f64 :: powi;
        ", " std :: vec :: Vec :: new;
        ", " std :: vec :: Vec :: deref;
        ", " core :: slice :: iter;
        ", " std :: slice :: Iter :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: string :: String :: to_string;
        ", " std :: collections :: HashMap :: get;
        ", " std :: option :: Option :: unwrap;
        ", "} Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: values) {std :: vec :: Vec :: push;
        ", " std :: collections :: HashMap :: get_mut;
        ", " std :: option :: Option :: unwrap;
        ", "} Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: tally) {std :: f64 :: powi;
        ", " std :: collections :: HashMap :: new;
        ", " std :: vec :: Vec :: into_iter;
        ", " std :: slice :: Iter :: next;
        ", " std :: string :: String :: to_string;
        ", "} Decl (andrew_fuzz :: core :: feature_vector :: {impl # 0} :: new) {std :: collections :: HashMap :: insert;
        ", " core :: fmt :: ArgumentV1 :: new_debug;
        ", " std :: fmt :: rt :: v1 :: Count :: Is;
        ", " std :: fmt :: rt :: v1 :: Argument :: new;
        ", " core :: fmt :: UnsafeArg :: new;
        ", " std :: fmt :: Arguments :: new_v1_formatted;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: fmt) {std :: io :: _print;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: clone;
        ", " core :: bit_array :: BitArray :: clone;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", " core :: bit_array :: BitArray :: peek;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: eq) {core :: bit_array :: BitArray :: peek;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: add_assign) {core :: bit_array :: BitArray :: extend;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", " std :: vec :: Vec :: len;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", " std :: vec :: Vec :: clone;
        ", " std :: cell :: RefCell :: new;
        ", " std :: rc :: Rc :: new;
        ", " core :: bit_array :: BitArray :: clone;
        ", " core :: bit_array :: BitArray :: len;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow_mut;
        ", " core :: bit_array :: BitArray :: clean_end_offset;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: len;
        ", " std :: cell :: RefMut :: deref;
        ", " std :: vec :: Vec :: len;
        ", " std :: cell :: RefMut :: deref_mut;
        ", " std :: vec :: Vec :: index_mut;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", " core :: bit_array :: BitArray :: peek;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: len;
        ", " core :: bit_array :: BitArray :: eat;
        ", " std :: option :: Option :: unwrap;
        ", " core :: bit_array :: BitArray :: peek;
        ", " std :: cell :: RefMut :: deref_mut;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: pos) {} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: extend) {std :: vec :: Vec :: push;
        ", " std :: rc :: Rc :: clone;
        ", " core :: bit_array :: BitArray :: matching_data;
        ", " core :: panicking :: panic;
        ", " core :: bit_array :: BitArray :: pos;
        ", " core :: bit_array :: BitArray :: pos;
        ", " core :: panicking :: panic;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: advance_to_match) {core :: bit_array :: BitArray :: advance;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: advance) {} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: matching_data) {std :: rc :: Rc :: eq;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clean_offset) {} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clean_end_offset) {} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: len) {} Decl (andrew_fuzz :: core ::
          bit_array :: {impl # 0} :: eat) {std :: rc :: Rc :: clone;
        ", " core :: panicking :: panic;
        ", " core :: panicking :: panic;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", " std :: vec :: Vec :: index;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", " std :: vec :: Vec :: index;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: peek) {std :: vec :: Vec :: index;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: clone) {std :: rc :: Rc :: clone;
        ", " std :: rc :: Rc :: deref;
        ", " std :: cell :: RefCell :: borrow;
        ", " std :: cell :: Ref :: deref;
        ", " std :: vec :: Vec :: as_ref;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: to_file) {std :: fs :: write;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: from_file :: {closure # 0}) {core :: bit_array :: BitArray :: new;
        ", " std :: path :: Path :: new;
        ", " std :: fs :: read;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: from_file) {std :: result :: Result :: map;
        ", " std :: vec :: Vec :: new;
        ", "} Decl (andrew_fuzz :: core :: bit_array :: {impl # 0} :: fresh) {core :: bit_array :: BitArray :: new;
        ", " std :: vec :: Vec :: len;
        ", " std :: vec :: Vec :: index_mut;
        ", " std :: vec :: Vec :: index_mut;
        ", " std :: vec :: Vec :: len;
        ", " core :: panicking :: panic;
        ", " std :: vec :: Vec :: len;
        ", " std :: cell :: RefCell :: new;
        ", " std :: rc :: Rc :: new;
        "]
}
