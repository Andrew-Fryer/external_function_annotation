I followed instructions here to get nightly rust:
https://doc.rust-lang.org/book/appendix-07-nightly-rust.html
`rustup toolchain install nightly`
`rustup toolchain list`
`rustup override set nightly` inside project root

I do this inside the root of a Rust project to get the thir:
`cargo rustc -- -Z unpretty=thir-tree >> thir-tree.txt`
The command is given here for hir:
https://rustc-dev-guide.rust-lang.org/hir.html
and I'm using thir:
https://rustc-dev-guide.rust-lang.org/thir.html
`cargo rustc -- -Z unpretty=thir-flat >> thir-flat.txt`

`ulimit -s hard` solves the stack overflow error (TXL0911W)
`txl -s 4000M example_thir.txt call_island.grm`
the "-s" option solves the error about the input being too long (TXL0142E).

This showed me how to get the thir-flat representation, which I think is better for me.


I used this kind of thing to count the openning and closes braces/parentheses/brackets:
`cat example_thir.txt | fgrep -o ']' | wc -l`


I think it is way too hard to automatically work out that "std : : rc : : Rc : : < core : : DataModelBase > : : new" just calls "core : : DataModelBase : : new"
Maybe I could and should hardcode this in...

https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std
https://docs.rust-embedded.org/embedonomicon/smallest-no-std.html
`cargo rustc -Z build-std=std,core,alloc --target x86_64-unknown-linux-gnu -- -Z unpretty=thir-flat`
^crap, that doesn't actually print out the THIR for std :|

I need to build the Rust compiler with the nightly Rust compiler!

Or, I could just manually put the rust std stuff in a file and then cat it with the TXL program output.

Here's what dynamic dispatch looks like:
`0 : 443 ~ andrew_fuzz [741 f] : : library : : constraint : : {impl # 10} : : do_serialization - - > > < dyn core : : DataModel as core : : Serializer > : : do_serialization;`

Here's an example of a line we don't care about:
`0 : 443 ~ andrew_fuzz [741 f] : : library : : constraint : : {impl # 10} : : do_serialization - - > > < std : : rc : : Rc < dyn core : : DataModel > as std : : ops : : Deref > : : deref;`
I think the most elegant way to treat this is to just add "deref" to the list of internal functions.

I think it would be good to use another TXL program to transform the facts into something that python can process more easily.

I searched through all_calls.txt and found: no double quotes!

I tried running on LibAFL, and it is too long:
"[./thir-flat.txt, call_island.txl] : TXL0142E line 1600002 of ./thir-flat.txt - (TXL implementation limit) Input file too long (> 1600000 lines) (a larger size should be used for this input)"
"The total length of the input to the TXL program, in terms of individual input items,
is longer than the TXL implementation can handle at the present size."
Note: I'm already using the maximum size.
"[./thir-flat.txt, call_island.txl] : TXL0141E - (TXL implementation limit) Input too large (total length > 16000000 tokens) (a larger size is required for this input)"
"An line in the input is longer than the maximum that the TXL implementation can handle."
